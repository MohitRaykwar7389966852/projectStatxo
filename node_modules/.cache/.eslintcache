[{"F:\\FunctionUp\\statxo\\src\\index.js":"1","F:\\FunctionUp\\statxo\\src\\App.js":"2","F:\\FunctionUp\\statxo\\src\\reportWebVitals.js":"3","F:\\FunctionUp\\statxo\\src\\component\\addExcel.js":"4","F:\\FunctionUp\\statxo\\src\\component\\getExcel.js":"5","F:\\FunctionUp\\statxo\\src\\component\\navbar.js":"6","F:\\FunctionUp\\statxo\\src\\component\\editExcel.js":"7"},{"size":771,"mtime":1671613358247,"results":"8","hashOfConfig":"9"},{"size":572,"mtime":1671179950188,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1671024069193,"results":"11","hashOfConfig":"9"},{"size":2971,"mtime":1671121319222,"results":"12","hashOfConfig":"9"},{"size":8809,"mtime":1671613774409,"results":"13","hashOfConfig":"9"},{"size":695,"mtime":1671120902053,"results":"14","hashOfConfig":"9"},{"size":2085,"mtime":1671430965969,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"66wbyg",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"F:\\FunctionUp\\statxo\\src\\index.js",[],[],[],"F:\\FunctionUp\\statxo\\src\\App.js",[],[],[],"F:\\FunctionUp\\statxo\\src\\reportWebVitals.js",[],[],"F:\\FunctionUp\\statxo\\src\\component\\addExcel.js",["41"],[],"import 'bootstrap/dist/css/bootstrap.css';\r\nimport { useState } from 'react';\r\nimport * as XLSX from \"xlsx\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Navbar from './navbar';\r\n\r\nfunction AddExcel() {\r\n\r\n    //excel file state\r\n    const [excel, setExcel] = useState('');\r\n\r\n    function handleChange(e) {\r\n        const files = e.target.files[0];\r\n        setExcel(files);\r\n    }\r\n    //upload fucntion\r\n    function upload(e) {\r\n        e.preventDefault()\r\n\r\n        let f = excel\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, { type: \"array\" });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_json(ws);\r\n            /* Update state */\r\n            console.log(data);\r\n\r\n            //axios call to send data in backend\r\n            let success = 0\r\n            let fail = 0\r\n\r\n            data.map((i, index) => {\r\n                console.log(i)\r\n                axios.post('http://localhost:4000/addExcel', i,\r\n                    {\r\n                        headers: { 'Content-Type': 'application/json' }\r\n                    }).then(res => {\r\n                        console.log(res)\r\n                        success++\r\n\r\n                        if (success === data.length) {\r\n                            toast.success(\"Excel File All Data Saved Successfully\", {\r\n                                position: toast.POSITION.TOP_CENTER\r\n                            });\r\n                        }\r\n\r\n                    }).catch(error => {\r\n                        fail++\r\n                        console.log(error.message)\r\n\r\n                        if (fail === data.length) {\r\n                            toast.error(\"Failed To Saved Excel File Data\", {\r\n                                position: toast.POSITION.TOP_CENTER\r\n                            });\r\n                        }\r\n                    })\r\n            })\r\n        };\r\n        reader.readAsArrayBuffer(f);\r\n    }\r\n    return (\r\n        <div>\r\n            {<Navbar/>}\r\n            <form class=\"m-5\" onSubmit={upload} encType=\"multipart/form-data\">\r\n                <div class=\"mb-3\">\r\n                    <label for=\"exampleInputEmail1\" class=\"form-label\">Upload Excel File</label>\r\n                    <input type=\"file\" name='excelfile' class=\"form-control\" onChange={handleChange}></input>\r\n                    <div class=\"form-text\">select excel file and upload</div>\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Upload</button>\r\n            </form>\r\n            {<ToastContainer />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddExcel;","F:\\FunctionUp\\statxo\\src\\component\\getExcel.js",["42","43","44","45"],[],"import 'bootstrap/dist/css/bootstrap.css';\r\nimport axios from \"axios\";\r\nimport Navbar from './navbar';\r\nimport { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction GetExcel() {\r\n\r\n    const [list, setList] = useState('');\r\n\r\n    const [msg, setMsg] = useState('');\r\n\r\n    const [status, setStatus] = useState('');\r\n    const [postyear, setPY] = useState('');\r\n    const [postmonth, setPM] = useState('');\r\n\r\n    const [sort, setSort] = useState('');\r\n    const [order, setOrder] = useState(\"\");\r\n\r\n    function clear(e) {\r\n        setStatus('')\r\n        setPY('')\r\n        setPM('')\r\n        dataLoad()\r\n    }\r\n\r\n    function filter(e) {\r\n        e.preventDefault()\r\n\r\n        axios.get('http://localhost:4000/getExcel?Status=' + status + \"&PostingYear=\" + postyear + \"&PostingMonth=\" + postmonth)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                let arr = res.data.data\r\n                if (arr.length != 0) {\r\n                    setList(arr)\r\n                    setMsg('')\r\n                } else {\r\n                    setMsg(\"No Data Available To Show\")\r\n                    setList('')\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    let dataLoad = async () => {\r\n        await axios.get('http://localhost:4000/getExcel?sortby='+sort+'&order='+order)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                let arr = res.data.data\r\n                if (arr.length != 0) {\r\n                    setList(arr)\r\n                    setMsg('')\r\n                }\r\n                else {\r\n                    setMsg(\"No Data Available To Show\")\r\n                    setList('')\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error.message)\r\n            })\r\n    }\r\n\r\n    useEffect(dataLoad\r\n        , [])\r\n\r\n    function sorting(e){\r\n        e.preventDefault()\r\n        console.log(sort,order)\r\n        dataLoad()\r\n    }\r\n\r\n    let array = [...list]\r\n\r\n    let arr = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n        arr.push({\r\n            \"CompanyName\": array[i].CompanyName,\r\n            \"BusinessUnitName\": array[i].BusinessUnitName,\r\n            \"ReportingLevel4\": array[i].ReportingLevel4,\r\n            \"Quantity\": array[i].Quantity,\r\n            \"AmountEUR\": array[i].AmountEUR,\r\n            \"PostingYear\": array[i].PostingYear,\r\n            \"PostingMonth\": array[i].PostingMonth,\r\n            \"ActionType\": array[i].ActionType,\r\n            \"ActionNumber\": array[i].ActionNumber,\r\n            \"ActionName\": array[i].ActionName,\r\n            \"Status\": array[i].Status,\r\n            \"Edit\": <Link class=\"btn btn-primary\" to={\"/editExcel/\" + array[i][\"_id\"]} >Edit</Link>\r\n        });\r\n    }\r\n\r\n    let columns = [\r\n        \"CompanyName\",\r\n        \"BusinessUnitName\",\r\n        \"ReportingLevel4\",\r\n        \"Quantity\",\r\n        \"AmountEUR\",\r\n        \"PostingYear\",\r\n        \"PostingMonth\",\r\n        \"ActionType\",\r\n        \"ActionNumber\",\r\n        \"ActionName\",\r\n        \"Status\",\r\n        \"Edit\"\r\n    ]\r\n\r\n    const [cols, setCols] = useState(columns);\r\n    const [dragOver, setDragOver] = useState(\"\");\r\n\r\n    const handleDragStart = e => {\r\n        const { id } = e.target;\r\n        const idx = cols.indexOf(id);\r\n        e.dataTransfer.setData(\"colIdx\", idx);\r\n    };\r\n\r\n    const handleDragOver = e => e.preventDefault();\r\n    const handleDragEnter = e => {\r\n        const { id } = e.target;\r\n        setDragOver(id);\r\n    };\r\n\r\n    const handleOnDrop = e => {\r\n        const { id } = e.target;\r\n        const droppedColIdx = cols.indexOf(id);\r\n        const draggedColIdx = e.dataTransfer.getData(\"colIdx\");\r\n        const tempCols = [...cols];\r\n\r\n        tempCols[draggedColIdx] = cols[droppedColIdx];\r\n        tempCols[droppedColIdx] = cols[draggedColIdx];\r\n        setCols(tempCols);\r\n        setDragOver(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {<Navbar />}\r\n            <h3 class=\"text-center mt-3 \">Data List</h3>\r\n\r\n            <form class=\"form-inline row m-4\" onSubmit={filter}>\r\n                <div class=\"col-sm-3 mt-1\">\r\n                    <select class=\"form-select\" name=\"status\" onChange={e => setStatus(e.target.value)} value={status}>\r\n                        <option selected>Status</option>\r\n                        <option value=\"In-Progress\">In-Progress</option>\r\n                        <option value=\"Pending\">Pending</option>\r\n                        <option value=\"Completed\">Completed</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"col-sm-3 mt-1\">\r\n                    <select class=\"form-select\" name=\"postyear\" onChange={e => setPY(e.target.value)} value={postyear}>\r\n                        <option selected>Posting Year</option>\r\n                        <option value=\"2020\">2020</option>\r\n                        <option value=\"2021\">2021</option>\r\n                        <option value=\"2022\">2022</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"col-sm-3 mt-1\">\r\n                    <select class=\"form-select\" name=\"postmonth\" onChange={e => setPM(e.target.value)} value={postmonth}>\r\n                        <option selected>Posting Month</option>\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"4\">4</option>\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"6\">6</option>\r\n                        <option value=\"7\">7</option>\r\n                        <option value=\"8\">8</option>\r\n                        <option value=\"9\">9</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"11\">11</option>\r\n                        <option value=\"12\">12</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"col-sm-3 mt-1\">\r\n                    <button type=\"submit\" class=\"btn btn-primary ms-1\">Filter</button>\r\n                    <button type='button' class=\"btn btn-danger ms-1\" onClick={clear}>Clear</button>\r\n                </div>\r\n            </form>\r\n\r\n            <form class=\"form-inline row m-4\" onSubmit={sorting}>\r\n                <div class=\"col-sm-2\">\r\n                    <select class=\"form-select\" value={sort} onChange={e=>setSort(e.target.value)}>\r\n                        <option value=\"\" selected>Sort By</option>\r\n                        <option value=\"CompanyName\">Company Name</option>\r\n                        <option value=\"BusinessUnitName\">Business Unit</option>\r\n                        <option value=\"PostingMonth\">Posting Month</option>\r\n                        <option value=\"PostingYear\">Posting Year</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"col-sm-2 ms-2\">\r\n                    <button name=\"asn\"  type=\"submit\" class=\"btn btn-sm btn-outline-primary m-1\" value=\"1\" onClick={e=>setOrder(e.target.value)}>Asn</button>\r\n                    <button name=\"dsn\" type=\"submit\" class=\"btn btn-sm btn-outline-danger m-1\" value=\"-1\" onClick={e=>setOrder(e.target.value)}>Dsn</button>\r\n                </div>\r\n            </form>\r\n\r\n            <table class=\"table mt-2 table-striped table-bordered\">\r\n                <thead class=\"bg-info text-light\">\r\n                    <tr>\r\n                        {cols.map(col => (\r\n                            <th\r\n                                id={col}\r\n                                key={col}\r\n                                draggable\r\n                                onDragStart={handleDragStart}\r\n                                onDragOver={handleDragOver}\r\n                                onDrop={handleOnDrop}\r\n                                onDragEnter={handleDragEnter}\r\n                                dragOver={col === dragOver}\r\n                            >\r\n                                {col}\r\n                            </th>\r\n                        ))}\r\n\r\n\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {arr.map(row => (\r\n                        <tr key={row.id}>\r\n                            {Object.entries(row).map(([k, v], idx) => (\r\n                                <td key={v} dragOver={cols[idx] === dragOver}>\r\n                                    {\r\n                                        row[cols[idx]]}\r\n                                </td>\r\n                            ))}\r\n\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n            <p class=\"font-monospace text-center fs-4 mt-5\">{msg}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GetExcel;","F:\\FunctionUp\\statxo\\src\\component\\navbar.js",[],[],"F:\\FunctionUp\\statxo\\src\\component\\editExcel.js",[],[],{"ruleId":"46","severity":1,"message":"47","line":40,"column":33,"nodeType":"48","messageId":"49","endLine":40,"endColumn":35},{"ruleId":"50","severity":1,"message":"51","line":34,"column":32,"nodeType":"52","messageId":"53","endLine":34,"endColumn":34},{"ruleId":"54","severity":1,"message":"55","line":45,"column":20,"nodeType":"48","endLine":62,"endColumn":6},{"ruleId":"50","severity":1,"message":"51","line":50,"column":32,"nodeType":"52","messageId":"53","endLine":50,"endColumn":34},{"ruleId":"54","severity":1,"message":"56","line":65,"column":11,"nodeType":"57","endLine":65,"endColumn":13,"suggestions":"58"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'order' and 'sort'. Either include them or remove the dependency array.","ArrayExpression",["59"],{"desc":"60","fix":"61"},"Update the dependencies array to be: [order, sort]",{"range":"62","text":"63"},[1852,1854],"[order, sort]"]